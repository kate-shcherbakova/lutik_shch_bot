import schedule
import time
import config
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å Api Token –±–æ—Ç–∞
import asyncio
from parser_file import Image
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞
import logging
# 1 - –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É logging
# –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º –±–æ—Ç–∞ (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ)
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
# 2 - –ú—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from sqlighter import SQLighter

logging.basicConfig(level=logging.INFO)
# 4 - –≠—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –≤—ã–≤–µ–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞.
bot = Bot(token=config.TOKEN)
# 5 - –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É –±–æ—Ç–∞, –≥–¥–µ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ–≥–æ —Ç–æ–∫–µ–Ω —Ä–∞–≤–µ–Ω –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
dp = Dispatcher(bot)
# 6 - –î–∏—Å–ø–µ—Ç—á–µ—Ä. –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±—É–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
dbase = SQLighter('dbase.db')

block_number = 0
picture = Image()
name_of_cat = picture.get_categories()  # 50
length_of_block = len(name_of_cat) // 4  # 12
n_of_blocks = 4 + bool(len(name_of_cat) % 4)  # 5
com = ['/üì∑–§–æ—Ç–æ', '/‚ò∞–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '/‚ò∫–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '/üò¢–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', '/‚ùì–°—Ç–∞—Ç—É—Å']


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline Keyboard - –±–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º
def create_block(number):
    markup = InlineKeyboardMarkup(row_width=3)
    if number == 1:
        markup_item0 = InlineKeyboardButton('All photos', callback_data='/photos')
        markup.add(markup_item0)

    index = (number - 1) * length_of_block
    index2 = number * length_of_block
    if number == n_of_blocks:
        index2 = len(name_of_cat)
    while (index < index2):
        text1 = edit_category_name(name_of_cat[index])
        markup_item1 = InlineKeyboardButton(text1, callback_data=name_of_cat[index])
        text2 = edit_category_name(name_of_cat[index + 1])
        markup_item2 = InlineKeyboardButton(text2, callback_data=name_of_cat[index + 1])
        markup.add(markup_item1, markup_item2)
        index += 2

    if number != n_of_blocks:
        markup_item2 = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', callback_data='show_more')
        markup.add(markup_item2)

    return markup


# –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É inline keyboard
@dp.callback_query_handler(lambda callback_query: True)
async def reply_to_button(call: types.CallbackQuery):
    try:
        if call.data == 'show_more':
            if config.global_number == n_of_blocks:
                config.global_number = 1
            else:
                config.global_number += 1
            markup = create_block(config.global_number)
            await bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–æ—Ç–æ:', reply_markup=markup)
        else:
            cat = call.data
            dbase.update_category(call.from_user.id, cat)
            await bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {0}'.format(edit_category_name(cat)))
    except Exception as exc:
        print('ERROR' + repr(exc))


# /photo-cat.jpeg = Photo cat
def edit_category_name(category_name, flag=False):
    if flag:
        category_name = category_name.strip('.jpg')
    category_name = category_name.strip('/')
    category_name = category_name.replace('-', ' ')
    category_name = category_name.capitalize()
    return category_name


async def send_photo(user_id):
    # link - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É .jpg
    link = dbase.get_photo_link(user_id)
    filename = picture.download_img(link)
    try:
        with open(filename, 'rb') as photo:
            await bot.send_photo(
                user_id,
                photo,
                caption=edit_category_name(filename, True),
                disable_notification=True
            )
        picture.remove_img(filename)
    except:
        pass


async def send_smth(chat_id):
    await bot.send_message(chat_id=chat_id, text="HELLO")


# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@dp.message_handler(commands=['üì∑–§–æ—Ç–æ'])
async def photo(message: types.Message):
    a: types.Message
    a = await message.answer('–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–∂–∫–æ. –Ø –∏—â—É –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ...')
    m_id = a.message_id
    await send_photo(message.from_user.id)
    await bot.delete_message(message.chat.id, m_id)


# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # —Å–æ–∑–¥–∞–Ω–∏–µ ReplyKeyboardMarkup
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for command in com:
        item = KeyboardButton(command)
        markup.add(item)

    await message.answer("–ü—Ä–∏–≤–µ—Ç {0}!".format(message.from_user.first_name))
    await message.answer(config.start_text.format(message.from_user.first_name), reply_markup=markup)


# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π with inline keyboard
@dp.message_handler(commands=['‚ò∞–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'])
async def categories(message: types.Message):
    config.global_number = 1
    markup = create_block(config.global_number)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–æ—Ç–æ:', reply_markup=markup)


# –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['‚ò∫–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'])
async def subscribe(message: types.Message):
    if not dbase.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        dbase.add_subscriber(message.from_user.id, message.from_user.username)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    elif dbase.status(message.from_user.id):
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞–Ω
        await message.answer("–í—ã –∏—Ç–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        dbase.update_subscription(message.from_user.id, True)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    # user_id = message.from_user.id


# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=['üò¢–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'])
async def unsubscribe(message: types.Message):
    if not dbase.subscriber_exists(message.from_user.id) or not dbase.status(message.from_user.id):
        dbase.add_subscriber(message.from_user.id, message.from_user.username, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        dbase.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")


# –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@dp.message_handler(commands=['‚ùì–°—Ç–∞—Ç—É—Å'])
async def status(message: types.Message):
    if dbase.status(message.from_user.id):
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")


# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def smth(message: types.Message):
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã (")


if __name__ == '__main__':
    # –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
    executor.start_polling(dp, skip_updates=True)
